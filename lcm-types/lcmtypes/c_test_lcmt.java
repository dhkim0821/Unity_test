/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class c_test_lcmt implements lcm.lcm.LCMEncodable
{
    public float body_pos[];
    public float body_ori[];
 
    public c_test_lcmt()
    {
        body_pos = new float[3];
        body_ori = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xbc9c850443fb3b27L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.c_test_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.c_test_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_pos[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_ori[a]); 
        }
 
    }
 
    public c_test_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public c_test_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.c_test_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.c_test_lcmt o = new lcmtypes.c_test_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.body_pos = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_pos[a] = ins.readFloat();
        }
 
        this.body_ori = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_ori[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.c_test_lcmt copy()
    {
        lcmtypes.c_test_lcmt outobj = new lcmtypes.c_test_lcmt();
        outobj.body_pos = new float[(int) 3];
        System.arraycopy(this.body_pos, 0, outobj.body_pos, 0, 3); 
        outobj.body_ori = new float[(int) 3];
        System.arraycopy(this.body_ori, 0, outobj.body_ori, 0, 3); 
        return outobj;
    }
 
}

